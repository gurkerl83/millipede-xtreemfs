#include "constants.idl"
#include "mrc_osd_types.idl"


module org # 1000
{
  module xtreemfs # 0
  {
    module interfaces # 0
    {
      struct InternalGmax # 50
      {
        uint64_t epoch;
        uint64_t last_object_id;
        uint64_t file_size;
      };

      struct ObjectData # 51
      {
        buffer data;
        uint32_t checksum;
        uint32_t zero_padding;
        boolean invalid_checksum_on_osd;
      };

      struct InternalReadLocalResponse # 52
      {
        NewFileSize new_file_size;
        uint32_t zero_padding;
        ObjectData data;
      };


      interface OSDInterface # 300
      {
        // Constants
        const uint32_t DEFAULT_ONCRPC_PORT = 32640;
        const uint32_t DEFAULT_ONCRPCS_PORT = 32640;
        const uint32_t DEFAULT_HTTP_PORT = 30640; 

        // Exceptions
        exception ConcurrentModificationException # 6 { string stack_trace; };
        exception errnoException # 7 { uint32_t error_code; string error_message; string stack_trace; };
        exception InvalidArgumentException # 8 { string error_message; };
        exception OSDException # 11 { uint32_t error_code; string error_message; string stack_trace; };
        exception ProtocolException # 9 { uint32_t accept_stat; uint32_t error_code; string stack_trace; };
        exception RedirectException # 10 { string to_uuid; };

        // FUSE/POSIX operations
        void read( FileCredentials file_credentials, string file_id, uint64_t object_number, uint64_t object_version, uint32_t offset, uint32_t length, out ObjectData object_data ) # 1;
        void truncate( FileCredentials file_credentials, string file_id, uint64_t new_file_size, out OSDWriteResponse osd_write_response ) # 2;
        void unlink( FileCredentials file_credentials, string file_id ) # 3;
        void write( FileCredentials file_credentials, string file_id, uint64_t object_number, uint64_t object_version, uint32_t offset, uint64_t lease_timeout, ObjectData object_data, out OSDWriteResponse osd_write_response ) # 4;

        // XtreemFS-specific operations
      	void xtreemfs_broadcast_gmax( string fileId, uint64_t truncateEpoch, uint64_t lastObject, uint64_t fileSize ) # 1000;
        ObjectData xtreemfs_check_object( FileCredentials file_credentials, string file_id, uint64_t object_number, uint64_t object_version) # 103;

	void xtreemfs_cleanup_get_results( out StringSet results ) #109;
	void xtreemfs_cleanup_is_running( out boolean is_running ) #108;
	void xtreemfs_cleanup_start( boolean remove_zombies, boolean remove_unavail_volume, boolean lost_and_found ) #105;
	void xtreemfs_cleanup_status( out string status ) #107;
	void xtreemfs_cleanup_stop( ) #106;
	

        InternalGmax xtreemfs_internal_get_gmax( FileCredentials file_credentials, string file_id ) # 100;
        uint64_t xtreemfs_internal_get_file_size( FileCredentials file_credentials, string file_id ) #104;
        void xtreemfs_internal_truncate( FileCredentials file_credentials, string file_id, uint64_t new_file_size, out OSDWriteResponse osd_write_response ) # 101;
        InternalReadLocalResponse xtreemfs_internal_read_local( FileCredentials file_credentials, string file_id, uint64_t object_number, uint64_t object_version, uint64_t offset, uint64_t length ) # 102;
        void xtreemfs_shutdown() # 50;      
	      void xtreemfs_ping( VivaldiCoordinates coordinates, out VivaldiCoordinates remote_coordinates ) #1001;
      };
    };
  };
};
