module org
{
  module xtreemfs
  {
    module interfaces
    {
      const uint8_t STRIPING_POLICY_DEFAULT = 0;
      const uint8_t STRIPING_POLICY_RAID0 = 1;

      const uint8_t ACCESS_CONTROL_POLICY_NULL = 1;
      const uint8_t ACCESS_CONTROL_POLICY_POSIX = 2;
      const uint8_t ACCESS_CONTROL_POLICY_VOLUME = 3;

      const uint8_t OSD_SELECTION_POLICY_SIMPLE = 1;

      const uint16_t SERVICE_TYPE_MRC = 1;
      const uint16_t SERVICE_TYPE_OSD = 2;
      const uint16_t SERVICE_TYPE_VOLUME = 3;

      const string   REPL_UPDATE_PC_NONE = "";
      const string   REPL_UPDATE_PC_RONLY = "ronly";


      typedef sequence<string> StringSet;


      struct XCap
      {
        string file_id;
        uint32_t access_mode;
        uint64_t expires;
        string client_identity;
        uint32_t truncate_epoch;
        string server_signature;
      };


      struct StripingPolicy
      {
        uint8_t policy;
        uint32_t stripe_size;
        uint32_t width;
      };

      struct Replica
      {
        StripingPolicy striping_policy;
        uint32_t  replication_flags;
        StringSet osd_uuids;
      };

      typedef sequence<Replica> ReplicaSet;

      struct XLocSet
      {
        ReplicaSet replicas;
        uint32_t   version;
        string     repUpdatePolicy;
        //used internally for read-only replication
        uint64_t   read_only_file_size;
      };


      struct stat_
      {
        uint32_t mode;
        uint32_t nlink;
        uint32_t uid;
        uint32_t gid;
        int16_t dev;
        uint64_t size;
        uint64_t atime;
        uint64_t mtime;
        uint64_t ctime;


        //xtreemfs specific attrs
        string user_id;
        string group_id;
        string file_id;
        string link_target;
        uint8_t object_type;
        uint32_t truncate_epoch;

        // Win32
        uint32_t attributes;
      };

      struct DirectoryEntry
      {
        string        entry_name;
        stat_         stbuf;
        string        link_target;
      };

      typedef sequence<DirectoryEntry> DirectoryEntrySet;

      struct statfs_
      {
        uint32_t bsize;
        uint64_t bfree;
        string fsid;
        uint32_t namelen;
      };

      struct NewFileSize
      {
        uint64_t size_in_bytes;
        uint32_t truncate_epoch;
      };

      typedef sequence<NewFileSize> NewFileSizeSet;

      struct OSDtoMRCData
      {
        uint8_t caching_policy;
        string data;
      };

      typedef sequence<OSDtoMRCData> OSDtoMRCDataSet;

      struct FileCredentials
      {
          XLocSet xlocs;
          XCap    xcap;
      };

      struct OSDWriteResponse {
          NewFileSizeSet new_file_size;
          OSDtoMRCDataSet opaque_data;
      };
    };
  };
};
