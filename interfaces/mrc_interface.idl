#include "mrc_osd_types.idl"
// #include "mrc_interface_event.h"
// #include "interface_exception_event.h"


module xtreemfs
{
  module interfaces
  {
    UserIdentity
    {
        string user_id;
        StringSet group_ids;
    };

    FileCredentials
    {
        XLocSet xlocs;
        XCap    xcap;
    };
    typedef sequence<FileCredentials> FileCredentialsSet;
    typedef sequence<StripingPolicy>  StripingPolicySet;

    interface MRCInterface #2
    {
      boolean access( UserIdentity user, string path, uint32_t mode );
      void chmod( UserIdentity user, string path, uint32_t mode );
      void chown( UserIdentity user, string path, string userId, string groupId );
      void create( UserIdentity user, string path, uint32_t mode, boolean open_, out FileCredentialsSet credentials );
      void getattr( UserIdentity user, string path, out stat_ stbuf );
      string getxattr( UserIdentity user, string path, string name );
      void mkdir( UserIdentity user, string path, uint32_t mode );
      void rename( UserIdentity user, string source_path, string target_path, out FileCredentialsSet credentials );
      //void query( string path, string link_path, out StringSet matching_paths );
      void link( UserIdentity user, string target_path, string link_path );
      void listxattr( UserIdentity user, string path, out StringSet names );
      // void lsvol( out VolumeMap local_volumes );
      void open( UserIdentity user, string path, uint32_t mode, out FileCredentials credentials );
      void readdir( UserIdentity user, string path, out DirectoryEntrySet directory_entries );
      

      //string readlink( string path ); -- use getattr instead
      void removexattr( UserIdentity user, string path, string name );
      void rmdir( UserIdentity user, string path );
      //void setattr( string path, stat_ stbuf ); --what is that???
      void symlink( UserIdentity user, string target_path, string link_path );
      void unlink( UserIdentity user, string path, out FileCredentialsSet credentials );
      void setxattr( UserIdentity user, string path, string name, string value, int flags );
      void statfs( UserIdentity user, string volume_name, out statfs_ statfsbuf );
      void utime( UserIdentity user, string path, uint64_t ctime, uint64_t atime, uint64_t mtime );

      void updateFileSize( XCap xcap, OSDWriteResponse new_file_size );
      void renew( XCap xcap, out XCap xcap );

      void mkvol( UserIdentity user, string password, string volume_name, uint32_t osd_selection_policy, StripingPolicy default_striping_policy, uint32_t access_control_policy );
      void rmvol( UserIdentity user, string password, string volume_name );

      void addReplica( string fileId, Replica new_replica );
      void removeReplica( string fileId, string osd_uuid );
      void getSuitableOSDs( string fileId, out StringSet osd_uuids );

      void restoreFile(string file_path, string fileId, uint64_t file_size, string osd_uuid, int32_t stripe_size);
      void checkFilesExist( string volumeId, StringSet fileIDs, out string bitmap );

      void admin_shutdown( string password );
      void admin_checkpoint( string password );
      void admin_dump_database( string password, string dump_file );
      void admin_restore_database( string password, string dump_file );
    };
  };
};
