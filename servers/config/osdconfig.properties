# optional debug level
# 0: emergency
# 1: alert
# 2: critical
# 3: error
# 4: warning
# 5: notice
# 6: info (default)
# 7: debug
#debug.level = 6

# optional debug categories - a space or comma-separated list of log message categories
# all (default) - enable logging for all categories
# lifecycle     - log messaages pertaining to service lifecycles
# net           - network-related log messages
# auth          - authorization-related log messages
# stage         - log messages pertaining to the request flow through the stages
# proc          - log messages pertaining to any kind of request processing
# db            - database access log messages
# misc          - any other log messages
#debug.categories = all

# port for the service to listen on
listen.port = 32640

# port for the status page (HTTP server)
http_port = 30640

# optional address for network device, "any" if not specified
# listen.address = 127.0.0.1

# Directory Service endpoint
dir_service.host = localhost
dir_service.port = 32638

# directory containing XtreemFS file content
object_dir = /var/lib/xtreemfs/objs/

# granularity of the local clock (in ms)
local_clock_renewal = 50

# interval between two remote clock syncs (in ms)
remote_time_sync = 60000

# specify whether SSL is required
ssl.enabled = false

# server credentials for SSL handshakes
ssl.service_creds = /etc/xos/xtreemfs/truststore/certs/osd.p12
ssl.service_creds.pw = xtreemfs
ssl.service_creds.container = pkcs12

# trusted certificates for SSL handshakes
ssl.trusted_certs = /etc/xos/xtreemfs/truststore/certs/xosrootca.jks
ssl.trusted_certs.pw = xtreemfs
ssl.trusted_certs.container = jks

report_free_space = true

# specify whether internal OSD checksums are required
# if the flag is set to true, the OSD will calculate checksums for
# newly created objects, which will be checked when the object is read
checksums.enabled = false

# algorithm used for checksum calculation
# by default, Adler32, CRC32, MD5 and SHA-1 are supported
checksums.algorithm = Adler32

# Shared secret between the MRC and all OSDs.
# The secret is used by the MRC to sign capabilities, i.e. security tokens for
# data access at OSDs. In turn, an OSD uses the secret to verify that the
# capability has been issued by the MRC. The shared secret will be replaced by
# a public key infrastructure in future releases.
capability_secret = secretPassphrase

# UUID for the OSD
uuid = default-OSD
