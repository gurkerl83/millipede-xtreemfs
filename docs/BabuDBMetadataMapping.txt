This document describes how XtreemFS metadata in the MRC is mapped to BabuDB
database indices.


1  VOLUME MANAGEMENT METADATA
==============================================================================

Volume metadata is stored in a database called 'V'. It is arranged in the
following indices:

VOL_INDEX                  VOL_NAME_INDEX (#1)
------------------         --------------
fileAccessPolicyId         volIDs
osdPolicyId                (volume name mapping)
volumeId
volumeName
osdPolicyArgs


Indices are structured as follows (numbers indicate entry sizes in bytes):

VOL_INDEX (BabuDB index #0)

The volume index maps a volume ID to an immutable set of volume metadata.
|----------------------------------------------------------------------------|
|key   | volumeId                                                            |
|      | var                                                                 |
|----------------------------------------------------------------------------|
|value | fileAccessPolicyId    osdPolicyId    volNameOffset                  |
|      | 2                     2              2                              |
|      |                                                                     |
|      | osdPolArgsOffset   volumeId   volumeName   osdPolicyArgs            |
|      | 2                  var        var          var                      |
|----------------------------------------------------------------------------|


VOL_NAME_INDEX (BabuDB index #1)

The volume name index maps volume names to volume IDs.
|----------------------------------------------------------------------------|
|key   | volumeName                                                          |
|      | var                                                                 |
|----------------------------------------------------------------------------|
|value | volumeId                                                            |
|      | var                                                                 |
|----------------------------------------------------------------------------|


2  FILE SYSTEM METADATA
==============================================================================

File system metadata of a volume is stored in a BabuDB database with the name
of the volume ID. The following indices exist, with the following types (the
numbers define different value types):

FILE_INDEX        XATTR_INDEX     FILE_ID_INDEX
--------------    -------------   -------------------
atime        0    XAttrs          parentID + fileName
ctime        0    
mtime        0    
size         0
type         1
id           1
permissions  1    ACL_INDEX       LAST_ID_INDEX
linkCount    1    ----------      ------------------
epoch        1    ACLEntries      lastAssignedFileID
issuedEpoch  1    
readOnlyFlag 1
fileName     1
owner        1
group        1
xLocList     2


Indices are structured as follows (numbers indicate entry sizes in bytes):

 FILE_INDEX (BabuDB index #0)
 
 The file index stores the primary metadata of a file or directory. This
 encapsulates most of the metadata returned by the 'stat' system call. To
 reduce the size of log entries, metadata has been grouped according to their
 types: type-0 metadata reflects frequently-changed metadata like time stamps
 and the file size, while less frequently-changed metadata like access
 permissions and ownership are defined as type-1 metadata. X-Locations lists
 which are frequently accessed w/ I/O operations but rarely changed are
 defined as type-3 metadata. Each such type has its own key in the index.
|----------------------------------------------------------------------------|
|key   | parentID   hash(filename)   type                                    |
|      | 8          4                1                                       |
|      |---------------------------------------------------------------------|
|      | parentID   hash(filename)   type   collisionCount  (hash collision) |
|      | 8          4                1      2                                |
|----------------------------------------------------------------------------|
|value | atime   ctime   mtime   size                                (files) |
|type=0| 4       4       4       8                                           |
|      |---------------------------------------------------------------------|
|      | atime   ctime   mtime                                 (directories) |
|      | 4       4       4                                                   |
|----------------------------------------------------------------------------|
|value | type  id  permissions  linkCount  epoch  issuedEpoch        (files) |
|type=1| 1     8   2            2          4      4                          |
|      |                                                                     |
|      | readOnlyFlag ownerOffset  groupOffset  fileName  owner  group       |
|      | 1            2            2            var       var    var         |
|      |---------------------------------------------------------------------|
|      | type  id  permissions  ownerOffset  groupOffset       (directories) |
|      | 1     8   2            2            2                               |
|      |                                                                     |
|      | fileName  owner  group                                              |
|      | var       var    var                                                |
|----------------------------------------------------------------------------|
|value | xLocList                                                            |
|type=2| var                                                                 |
|----------------------------------------------------------------------------|


 XATTR_INDEX (BabuDB index #1)
 
 The extended attribute index contains any user-defined extended attributes
 assigned to files or directories. Softlink targets and default striping
 policies are mapped to extended attributes
|----------------------------------------------------------------------------|
|key   | fileID   hash(owner)   hash(attrKey)   collisionCount               |
|      | 8        4             4               2                            |
|----------------------------------------------------------------------------|
|value | keyOffset  valueOffset  attrOwner  attrKey  attrValue               |
|      | 2          2            var        var      var                     |
|----------------------------------------------------------------------------|


 ACL_INDEX (BabuDB index #2)
 
 The ACL index stores optional access control lists for files.
|----------------------------------------------------------------------------|
|key   | fileID   entityName                                                 |
|      | 8        var                                                        |
|----------------------------------------------------------------------------|
|value | rights                                                              |
|      | 2                                                                   |
|----------------------------------------------------------------------------|


 FILE_ID_INDEX (BabuDB index #3)
 
 The file ID index maps file IDs to file index keys. The index is used to
 retrieve files by means of their IDs, if no path is available.
|----------------------------------------------------------------------------|
|key   | fileID                                                              |
|      | 8                                                                   |
|----------------------------------------------------------------------------|
|value | parentID  fileName                                                  |
|      | 8         var                                                       |
|----------------------------------------------------------------------------|


 LAST_ID_INDEX (BabuDB index #4)
  
The 'last ID' index stores a single key-value pair that contains the last ID
assigned to a file. This index is needed to assign IDs to newly-created files
or directories.
|----------------------------------------------------------------------------|
|key   | '*'                                                                 |
|      | 1                                                                   |
|----------------------------------------------------------------------------|
|value | lastAssignedFileID                                                  |
|      | 8                                                                   |
|----------------------------------------------------------------------------|


Complex data types are mapped as follows:

xLocList - represents an X-Locations list of a file
|----------------------------------------------------------------------------|
|version  numReplicas  replica1Offs ... replicaNOffs   xLoc1 ... xLocN       |
|4        4            4                4              var       var         |
|----------------------------------------------------------------------------|

xLoc - represents a single replica in an X-Locations list
|----------------------------------------------------------------------------|
|osdListOffset stripingPolicy numOSDs osd1ofs ... osdnofs osd1 ... osdn      |
|2             var            2       2           2       var      var       |
|----------------------------------------------------------------------------|

stripingPolicy - represents a striping policy
|----------------------------------------------------------------------------|
|stripeSize    width    pattern                                              |
|4             4        var                                                  |
|----------------------------------------------------------------------------|
