#!/usr/bin/env python

import sys, os.path, signal, shutil, time, traceback, unittest, subprocess
from errno import *
from optparse import OptionParser
from subprocess import Popen, call


original_cwd = os.getcwd()


# Constants
# Private key passphrases
CLIENT_PKCS12_PASSPHRASE = "passphrase"
PKCS12_PASSPHRASE = "passphrase"
DIR_PKCS12_PASSPHRASE = "passphrase" 
MRC_PKCS12_PASSPHRASE = "passphrase" 
OSD_PKCS12_PASSPHRASE = "passphrase" 
TRUSTED_CERTS_JKS_PASSPHRASE = "passphrase"

# Paths
MY_DIR_PATH = os.path.dirname( os.path.abspath( sys.modules[__name__].__file__ ) )
XTREEMFS_DIR_PATH = os.path.abspath( os.path.join( MY_DIR_PATH, ".." ) )
XTREEMFS_TESTS_DIR_PATH = os.path.join( XTREEMFS_DIR_PATH, "tests" )

CERT_DIR_PATH = os.path.join( XTREEMFS_DIR_PATH, "tests", "certs" )
CLIENT_PKCS12_FILE_PATH = os.path.join( CERT_DIR_PATH, "Client.p12" )
DIR_PKCS12_FILE_PATH = os.path.join( CERT_DIR_PATH, "DIR.p12" )
MRC_PKCS12_FILE_PATH = os.path.join( CERT_DIR_PATH, "MRC.p12" )
OSD_PKCS12_FILE_PATH = os.path.join( CERT_DIR_PATH, "OSD.p12" )
TRUSTED_CERTS_JKS_FILE_PATH = os.path.join( CERT_DIR_PATH, "trusted.jks" )

CLASSPATH = ( os.path.join( XTREEMFS_DIR_PATH, "src", "servers", "dist", "XtreemFS.jar" ),
              os.path.join( XTREEMFS_DIR_PATH, "src", "servers", "lib", "BabuDB.jar" ),
              os.path.join( XTREEMFS_DIR_PATH, "src", "servers", "lib", "yidl.jar" ) )

CLIENT_SSL_ARGS = ( "--pkcs12-file-path=%(CLIENT_PKCS12_FILE_PATH)s" % globals(), "--pkcs12-passphrase=%(CLIENT_PKCS12_PASSPHRASE)s" % globals() )
MNT_DIR_PATH_DEFAULT = os.path.abspath( os.path.join( original_cwd, "mnt" ) )
XTFS_MKVOL_FILE_PATH = os.path.join( XTREEMFS_DIR_PATH, "bin", "mkfs.xtreemfs" + ( sys.platform.startswith( "win" ) and ".exe" or "" ) )
XTFS_MOUNT_FILE_PATH = os.path.join( XTREEMFS_DIR_PATH, "bin", "mount.xtreemfs" + ( sys.platform.startswith( "win" ) and ".exe" or "" ) )

              
# Ports
DIR_HTTP_PORT = 30638
DIR_ONCRPC_PORT = 32638
MRC_HTTP_PORT = 30636 
MRC_ONCRPC_PORT = 32636
OSD_HTTP_PORT = 30640
OSD_ONCRPC_PORT = 32640

# Option defaults
DEBUG_LEVEL_DEFAULT = 0
DEBUG_LEVEL_DEFAULT_SERVICES = 6
NUM_OSDS_DEFAULT = 1
ENABLE_SSL_DEFAULT = False
CACHE_METADATA_DEFAULT = False
CACHE_DATA_DEFAULT = False
REPL_ON_CLOSE_DEFAULT = False
STRIPE_SIZE_DEFAULT = 128
STRIPING_POLICY_TYPE_DEFAULT = "RAID0"



def check_environment():
    if os.environ.has_key( "JAVA_HOME" ):
#        JVERS=`$JAVA_HOME/bin/java -version 2>&1 | grep "java version" | \
#            cut -d " " -f 3`
#        perl -e " exit 1 if ($JVERS < \"1.6.0\");"
#        if [ $? -eq 1 ]; then
#            echo "ERROR: java version is $JVERS but required is >= 1.6.0"
#            exit 1
#        fi
#    fi
#    echo "java home             $JAVA_HOME"
        pass
    else:
        print "$JAVA_HOME not set, JDK/JRE 1.6 required"
        return False

    for file_path in ( XTFS_MOUNT_FILE_PATH, ) + CLASSPATH:
        if not os.path.exists( file_path ):
            print "ERROR: %(file_path)s does not exist." % locals()
            return False
    
    return True


def clean( num_osds=NUM_OSDS_DEFAULT ):
	stop_services( num_osds=num_osds )
	unmount_volumes()
	for subdir_name in ( "config", "data", "log", "mnt", "run" ):
	    shutil.rmtree( subdir_name, ignore_errors=True ) 


def create_volumes( debug_level=DEBUG_LEVEL_DEFAULT, enable_ssl=ENABLE_SSL_DEFAULT, repl_on_close=REPL_ON_CLOSE_DEFAULT, num_osds=NUM_OSDS_DEFAULT, service_host="localhost" ):
        
    for osdnum in xrange( num_osds ):
        xtfs_mkvol_args = [XTFS_MKVOL_FILE_PATH]
        xtfs_mkvol_args.extend( ( "-d", str( debug_level ) ) )
        if enable_ssl: xtfs_mkvol_args.extend( CLIENT_SSL_ARGS )                
        xtfs_mkvol_args.extend( ( "-p", str( STRIPING_POLICY_TYPE_DEFAULT ) ) )
        xtfs_mkvol_args.extend( ( "-s", str( STRIPE_SIZE_DEFAULT ) ) )
        if not repl_on_close:
            xtfs_mkvol_args.extend( ( "-w", str( osdnum + 1 ) ) ) # Stripe width
        else:
            xtfs_mkvol_args.extend( ( "-w", "1" ) ) # Stripe width
        xtfs_mkvol_args.append( "%(service_host)s/test_%(osdnum)u" % locals() )
        xtfs_mkvol_args = " ".join( xtfs_mkvol_args )                            
        print "Creating volume test_%(osdnum)s with command line" % locals(), xtfs_mkvol_args
        retcode = call( xtfs_mkvol_args, shell=True )
#            if retcode != 0 and retcode != EEXIST:
#                print "FAILED: cannot create volume test_%(osdnum)u" % locals()
#                stop_services( num_osds )
#                sys.exit( 1 )

def generate_db_config( debug_level=DEBUG_LEVEL_DEFAULT ):
	locals().update( globals() )
	database_log = os.path.join( "data", "dir" )
	database_dir = os.path.join( "data", "dir" )
	open( os.path.join( "config", "db.config" ), "w+" ).write( """\
debug.level = %(debug_level)s
db.logDir = %(database_log)s
db.baseDir = %(database_dir)s
db.sync = FSYNC
worker.maxQueueLength = 250
worker.numThreads = 0
db.maxLogfileSize = 16777216
db.checkInterval = 300
db.pseudoSyncWait = 200
""" % locals() )

def generate_dir_config( debug_level=DEBUG_LEVEL_DEFAULT, enable_ssl=ENABLE_SSL_DEFAULT, enable_grid_ssl=ENABLE_SSL_DEFAULT ):
    locals().update( globals() )
    database_dir = os.path.join( "data", "dir" )
    open( os.path.join( "config", "dir.config" ), "w+" ).write( """\
uuid = test-env-DIR
debug.level = %(debug_level)s
listen.port = %(DIR_ONCRPC_PORT)u
http_port = %(DIR_HTTP_PORT)u
database.dir = %(database_dir)s
authentication_provider = org.xtreemfs.common.auth.NullAuthProvider
""" % locals() + _generate_ssl_config( enable_ssl, DIR_PKCS12_FILE_PATH, DIR_PKCS12_PASSPHRASE, enable_grid_ssl ) )
 
def generate_mrc_config( debug_level=DEBUG_LEVEL_DEFAULT, enable_ssl=ENABLE_SSL_DEFAULT, enable_grid_ssl=ENABLE_SSL_DEFAULT ):
    locals().update( globals() )
    database_log = os.path.join( "data", "mrc" )
    database_dir = os.path.join( "data", "mrc" )
    open( os.path.join( "config", "mrc.config" ), "w+" ).write( """\
uuid = test-env-MRC
debug.level = %(debug_level)s
listen.port = %(MRC_ONCRPC_PORT)u
http_port = %(MRC_HTTP_PORT)u 
dir_service.port = %(DIR_ONCRPC_PORT)u
dir_service.host = localhost
database.log = %(database_log)s
database.dir = %(database_dir)s
osd_check_interval = 300
no_atime = true
no_fsync = true
local_clock_renewal = 50
remote_time_sync = 60000
database.checkpoint.interval = 1800000
database.checkpoint.idle_interval = 1000
database.checkpoint.logfile_size = 16384
authentication_provider = org.xtreemfs.common.auth.NullAuthProvider
capability_secret = testsecret
""" % locals() + _generate_ssl_config( enable_ssl, MRC_PKCS12_FILE_PATH, MRC_PKCS12_PASSPHRASE, enable_grid_ssl ) )

def generate_osd_config( debug_level=DEBUG_LEVEL_DEFAULT, enable_ssl=ENABLE_SSL_DEFAULT, osdnum=1, enable_grid_ssl=ENABLE_SSL_DEFAULT ):
    locals().update( globals() )
    listen_port = OSD_ONCRPC_PORT + int( osdnum )
    http_port = OSD_HTTP_PORT + int( osdnum )
    object_dir = os.path.join( "data", "osd" + str( osdnum ) )
    open( os.path.join( "config", "osd" + str( osdnum ) + ".config" ), "w+" ).write( """\
uuid = test-env-OSD%(osdnum)s
debug.level = %(debug_level)s
listen.port = %(listen_port)u
http_port = %(http_port)u
dir_service.host = localhost
dir_service.port = %(DIR_ONCRPC_PORT)u
object_dir=%(object_dir)s
local_clock_renewal = 50
remote_time_sync = 60000
report_free_space = true
checksums.enabled = false
capability_secret = testsecret
""" % locals() + _generate_ssl_config( enable_ssl, OSD_PKCS12_FILE_PATH, OSD_PKCS12_PASSPHRASE, enable_grid_ssl ) )

def _generate_ssl_config( enable_ssl, pkcs12_file_path, pkcs12_passphrase, enable_grid_ssl ):
    locals().update( globals() )
    if enable_grid_ssl:
        gridsslcfg = "ssl.grid_ssl = true\n"
    else:
        gridsslcfg = "ssl.grid_ssl = false\n"
    if enable_ssl:            
        return """\
ssl.enabled = true
ssl.service_creds = %(pkcs12_file_path)s
ssl.service_creds.pw = %(pkcs12_passphrase)s
ssl.service_creds.container = PKCS12
ssl.trusted_certs = %(TRUSTED_CERTS_JKS_FILE_PATH)s
ssl.trusted_certs.pw = %(TRUSTED_CERTS_JKS_PASSPHRASE)s
ssl.trusted_certs.container = JKS        
""" % locals() + gridsslcfg
    else:        
        return """\
ssl.enabled = false        
"""            


def mount_volumes( debug_level=DEBUG_LEVEL_DEFAULT, enable_ssl=ENABLE_SSL_DEFAULT, mnt_dir_path=MNT_DIR_PATH_DEFAULT, num_osds=NUM_OSDS_DEFAULT, service_host="localhost", cache_metadata=CACHE_METADATA_DEFAULT, cache_data=CACHE_DATA_DEFAULT, repl_on_close=REPL_ON_CLOSE_DEFAULT ):
    assert os.getcwd() == original_cwd
    try: os.mkdir( mnt_dir_path )
    except: pass
    for osdnum in xrange( num_osds ):
        for direct_io in ( False, True ):
            mount_dir_name = str( osdnum ) + ( not direct_io and "_nondirect" or "" )
            mount_dir_path = os.path.join( mnt_dir_path, mount_dir_name ) 
            xtfs_mount_args = [XTFS_MOUNT_FILE_PATH]
            xtfs_mount_args.extend( ( "-d", str( debug_level ) ) )                
            xtfs_mount_args.append( "-f" ) # So we can redirect stdout and stderr
            if enable_ssl: xtfs_mount_args.extend( CLIENT_SSL_ARGS )
            if cache_metadata: xtfs_mount_args.append( "--cache-metadata" )
            if cache_data: xtfs_mount_args.append( "--write-back-cache" )
            if direct_io: xtfs_mount_args.extend( ( "-o", "direct_io" ) )
            DIR_ONCRPC_PORT = globals()["DIR_ONCRPC_PORT"]
            xtfs_mount_args.append( "%(service_host)s:%(DIR_ONCRPC_PORT)s/test_%(osdnum)u" % locals() )                
            xtfs_mount_args.append( mount_dir_path )
            xtfs_mount_args = " ".join( xtfs_mount_args )
            print "Mounting volume test_%(osdnum)s with command line" % locals(), xtfs_mount_args
            if not os.path.exists( mount_dir_path ): os.mkdir( mount_dir_path )
            if not os.path.exists( "log" ): os.mkdir( "log" )        
            log_file_path = os.path.join( "log", "client" + mount_dir_name + ".log" )
            stderr = stdout = open( log_file_path, "a" )
            xtfs_mount_process = Popen( xtfs_mount_args, shell=True, stdout=stdout, stderr=stderr )
            if repl_on_close:
                time.sleep(2)
                mount_dir_name = str( osdnum ) + ( not direct_io and "_nondirect" or "" )
                mount_dir_path = os.path.join( mnt_dir_path, mount_dir_name )
                repl_attr_cmd = "/usr/bin/setfattr -n xtreemfs.repl_factor -v " + str( osdnum + 1 ) + " " + mount_dir_path
                repl_attr2_cmd = "/usr/bin/setfattr -n xtreemfs.rsel_policy -v 3000 " + mount_dir_path
                print repl_attr_cmd 
                call ( repl_attr_cmd, shell=True, stdout=sys.stdout, stderr=sys.stderr )
                print repl_attr2_cmd 
                call ( repl_attr2_cmd, shell=True, stdout=sys.stdout, stderr=sys.stderr )

def run_tests( mnt_dir_path=MNT_DIR_PATH_DEFAULT, num_osds=NUM_OSDS_DEFAULT, test_module_names=None, verbose=False ):
    if verbose:
        stdout = sys.stdout
        stderr = sys.stderr
    else:
        stdout = subprocess.PIPE
        stderr = subprocess.STDOUT

    try:
        sys.path.append( XTREEMFS_TESTS_DIR_PATH )
        test_suite_factories = {}
        if test_module_names is None:
        	test_module_names = [os.path.splitext( file_name )[0] for file_name in os.listdir( XTREEMFS_TESTS_DIR_PATH ) if file_name.endswith( ".py" )]
        	
        for test_module_name in test_module_names:
            print "Trying to import test", test_module_name
            try:
                test_module = __import__( test_module_name )
            except ImportError:
                print "Could not import", test_module_name, "from tests"
                traceback.print_exc()
                continue

            try: 
                test_suite_factories[test_module_name] = getattr( test_module, "createTestSuite" )
            except AttributeError:
                print "Test module", test_module_name, "does not have a createTestSuite global function"	    		    	
                        
        test_module_names = test_suite_factories.keys()
        test_module_names.sort()
        for test_module_name in test_module_names:
            test_suite_factory = test_suite_factories[test_module_name]
            for mount_point_dir_name in os.listdir( mnt_dir_path ):
                test_suite = test_suite_factory( direct_io=( not "nondirect" in mount_point_dir_name ), stdout=stdout, stderr=stderr )                
                if test_suite is not None:            
                    mount_point_dir_path = os.path.join( mnt_dir_path, mount_point_dir_name )
                    print "Running", test_module_name, "in", mount_point_dir_path
                    test_run_dir_path = os.path.join( mount_point_dir_path, test_module_name )
                    try: os.mkdir( test_run_dir_path )
                    except: pass                                         
                    os.chdir( test_run_dir_path )
                    unittest.TextTestRunner( verbosity=( verbose and 2 or 1 ) ).run( test_suite )
                    os.chdir( mount_point_dir_path )
                    try: shutil.rmtree( test_run_dir_path )
                    except: traceback.print_exc()
    
        os.chdir( original_cwd )
        return 0
    except KeyboardInterrupt:
        os.chdir( original_cwd )
        return 1
    except:
        traceback.print_exc()
        os.chdir( original_cwd )
        return 1
    
    
def start_services( debug_level=DEBUG_LEVEL_DEFAULT_SERVICES, num_osds=NUM_OSDS_DEFAULT, enable_ssl=ENABLE_SSL_DEFAULT, enable_grid_ssl=ENABLE_SSL_DEFAULT ):
    for subdir_name in ( "config", "data", "log", "run" ):
        if not os.path.exists( subdir_name ):
            os.mkdir( subdir_name )
    
    generate_db_config( debug_level )
    generate_dir_config( debug_level, enable_ssl, enable_grid_ssl )
    generate_mrc_config( debug_level, enable_ssl, enable_grid_ssl )
    for osdnum in xrange( num_osds ):
        generate_osd_config( debug_level, enable_ssl, osdnum, enable_grid_ssl )

    _start_service( "dir" )
    _start_service( "mrc" )    
    for osdnum in xrange( num_osds ):
        _start_service( "osd", str( osdnum ) )

    time.sleep( 1.0 ) # Wait for the servers to start

    try:
#        pass
    	check_services( num_osds )
    except:
        traceback.print_exc()
        stop_services( num_osds )
        unmount_volumes()
        sys.exit( 1 )

def _start_service( service_name, service_num="" ):        
    args = [os.path.join( os.environ["JAVA_HOME"], "bin", "java" )] 
    args.append( "-ea" ) # Enable assertions
    args.extend( ( "-cp", "" + ( sys.platform.startswith( "win" ) and ";".join( CLASSPATH ) or ":".join( CLASSPATH ) ) + "", ) )
    args.append( "org.xtreemfs." + service_name + "." + service_name.upper() ) # Class name
    args.append( os.path.join( "config", service_name + service_num + ".config" ) ) # Configuration file
    if service_name == "dir":
    	args.append( os.path.join( "config", "db.config" ) ) # DB configuration file
    args = " ".join( args )
    log_file_path = os.path.join( "log", service_name + service_num + ".log" )
    stderr = stdout = open( log_file_path, "a" )
    print "Starting", service_name.upper() + service_num, "service with command line", args, "and redirecting output to", log_file_path
    p = Popen( args, shell=True, stdout=stdout, stderr=stderr )
    time.sleep( 1.0 )
    open( os.path.join( "run", service_name + service_num + ".run" ), "w+" ).write( str( p.pid ) )

def check_services( num_osds=NUM_OSDS_DEFAULT ):
    for osdnum in xrange( num_osds ):
        _check_service( "osd", str( osdnum ) )
    _check_service( "mrc" )
    _check_service( "dir" ) # Stop the DIR last so the other services can deregister

def _check_service( service_name, service_num="" ):
    run_file_path = os.path.join( "run", service_name + service_num + ".run" )
    if os.path.exists( run_file_path ):
	service_pid = int( open( run_file_path ).read().strip() )
	print "Checking", service_name.upper() + service_num, "service with PID", service_pid
	try:
            procid, exitvalue = os.waitpid( service_pid, os.WNOHANG )
	except OSError:
            traceback.print_exc()
            raise OSError, "service died after startup: " + service_name.upper() + service_num + ". check service log for more information."

        if procid != 0 and exitvalue != 0:
            raise OSError, "service died after startup: " + service_name.upper() + service_num + ". check service log for more information."

	    
def stop_services( num_osds=NUM_OSDS_DEFAULT ):
    for osdnum in xrange( num_osds ):
        _stop_service( "osd", str( osdnum ) )
    _stop_service( "mrc" )
    _stop_service( "dir" ) # Stop the DIR last so the other services can deregister

def _stop_service( service_name, service_num="" ):
    run_file_path = os.path.join( "run", service_name + service_num + ".run" )
    if os.path.exists( run_file_path ):
        service_pid = int( open( run_file_path ).read().strip() )
        print "Stopping", service_name.upper() + service_num, "service with PID", service_pid
        if sys.platform.startswith( "win" ):
            call( "TASKKILL /PID %(service_pid)u /F /T" % locals() )
        else:
            try: 
               os.kill( service_pid, signal.SIGTERM )
            except:
               traceback.print_exc()
            time.sleep(1)
            try:
                (procid, exitvalue) = os.waitpid(service_pid,os.WNOHANG)
                if (procid == 0):
                    print "process did not terminate... sending SIGKILL"
                    os.kill( service_pid, signal.SIGKILL )
            except:
                pass
        os.unlink( run_file_path )
#    else:
#        print "ERROR:", run_file_path, "does not exist,", service_name.upper(), "service is not running."


def unmount_volumes( mnt_dir_path=os.path.abspath( os.path.join( original_cwd, "mnt" ) ) ):
    for mounts_line in open( "/proc/mounts" ).readlines():
       mounts_line_parts = mounts_line.split()
       device = mounts_line_parts[0]
       mount_point_dir_path = mounts_line_parts[1]
       if device == "xtreemfs" and mount_point_dir_path.startswith( mnt_dir_path ):
           fusermount_args = " ".join( ["fusermount", "-u", mount_point_dir_path] )
           print "Unmounting volume with", fusermount_args
           call( fusermount_args, shell=True )

def save_status_pages( num_osds ):
    try:
        os.system("wget -O /tmp/mrc_status.html http://localhost:30636")
        os.system("wget -O /tmp/dir_status.html http://localhost:30638")
        for osdnum in xrange( num_osds ):
            port = str( 30640+osdnum )
            os.system("wget -O /tmp/osd"+str( osdnum )+"_status.html http://localhost:"+port)
    except:
        print "cannot fetch status pages"


if __name__ == "__main__":
    if not check_environment():
        sys.exit( 1 )

    usage = "usage: %prog [options] <server_host>"    
    option_parser = OptionParser( usage )
    option_parser.add_option( "--autotest", action="store_true", dest="autotest", help="run the autotests: start servers on localhost, create and mount volumes on localhost, then run all tests" )
    option_parser.add_option( "-c", "--clean", action="store_true", dest="clean", help="--stop and remove any directories used by the autotests" )
    option_parser.add_option( "-p", "--status-pages", action="store_true", dest="spages", help="save the status pages of all services after all tests completed" )
    option_parser.add_option( "-d", action="store", dest="debug_level", default=DEBUG_LEVEL_DEFAULT, help="client and server syslog/debug levels (EMERG, NOTICE, INFO, etc.)" )
    option_parser.add_option( "--enable-ssl", action="store_true", dest="enable_ssl", default=ENABLE_SSL_DEFAULT )
    option_parser.add_option( "--enable-grid-ssl", action="store_true", dest="enable_grid_ssl", default=ENABLE_SSL_DEFAULT, help="enables the GRID SSL mode (handshake only) requires --enable-ssl")
    option_parser.add_option( "--cache-metadata", action="store_true", dest="cache_metadata", default=CACHE_METADATA_DEFAULT )
    option_parser.add_option( "--cache-data", action="store_true", dest="cache_data", default=CACHE_DATA_DEFAULT )
    option_parser.add_option( "-m", action="append", dest="test_module_names", help="name(s) of test module(s) to run" )
    option_parser.add_option( "-o", action="store", dest="num_osds", type="int", default=NUM_OSDS_DEFAULT, help="number of OSDs to start" )
    option_parser.add_option( "--repl_on_close", action="store_true", dest="repl_on_close", default=REPL_ON_CLOSE_DEFAULT, help="enable automatic on-close replication" )
    option_parser.add_option( "--start", action="store_true", dest="start_services", help="start local servers" )
    option_parser.add_option( "--stop", action="store_true", dest="stop", help="unmount any XtreemFS volumes and stop local clients and servers" ) 
    options, positional_args = option_parser.parse_args()
    
    scheme="oncrpc://"
    if options.enable_grid_ssl:
        scheme="oncrpcg://"
    elif options.enable_ssl:
        scheme="oncrpcs://"
      
    if options.clean:
    	clean()
        
    elif options.start_services:
        start_services( debug_level=options.debug_level, enable_ssl=options.enable_ssl, num_osds=options.num_osds, enable_grid_ssl=options.enable_grid_ssl )
        
    elif options.stop:
        stop_services( num_osds=options.num_osds )
        unmount_volumes()
                                 
    else:            
        if len( positional_args ) > 1:        
            service_host = scheme+positional_args[0]
        else:
            service_host = scheme+"localhost"
            if options.autotest:
            	clean( num_osds=options.num_osds )
                start_services( debug_level=options.debug_level, enable_ssl=options.enable_ssl, num_osds=options.num_osds, enable_grid_ssl=options.enable_grid_ssl )
        
        try:
            create_volumes( debug_level=options.debug_level, enable_ssl=options.enable_ssl, num_osds=options.num_osds, service_host=service_host, repl_on_close=options.repl_on_close)
            mount_volumes( debug_level=options.debug_level, enable_ssl=options.enable_ssl, num_osds=options.num_osds, service_host=service_host, cache_metadata=options.cache_metadata, cache_data=options.cache_data, repl_on_close=options.repl_on_close )
        except KeyboardInterrupt:
            sys.exit( 1 )
        except:
            traceback.print_exc()
            sys.exit( 1 )
        
        time.sleep(5)
        ret = run_tests( num_osds=options.num_osds, test_module_names=options.test_module_names, verbose=True )
        if options.spages:
            save_status_pages( num_osds=options.num_osds )
        stop_services( num_osds=options.num_osds )
        unmount_volumes()
        sys.exit( ret )
        
